USE BD_MATRICULA_KENDALL
GO

--PROCESO ALMACENADO QUE SE UTILIZA PARA ABRIRI UN MODULO
CREATE OR ALTER PROCEDURE ABRIR_MODULO(@COD_MATERIA VARCHAR(30),
                                       @COD_LABORATORIO INT,
									   @COD_PROFESOR INT,
									   @GRUPO TINYINT,
									   @ESPACIO TINYINT,
									   @DESCUENTO_M DECIMAL(10,2),
									   @FECHA_INICIO DATE,
                                       @DIA_SEMANA VARCHAR(20),
                                       @HORA_INICIO TIME,
                                       @HORA_FIN TIME)
AS
BEGIN 
BEGIN TRY
	DECLARE @EXIS_MODULO BIT, 
			@EXIS_PROFESOR BIT,
			@EXIS_LABOR BIT,
			@VERF_CERTIF BIT,
			@VERF_CHOQ_PROF BIT,
			@VERF_CHOQ_LABOR BIT,
			@COSTO DECIMAL(10,2),
			@FECHA_FINAL DATE,
			@COD_MATERIA_CARRERA INT,
			@COD_MATERIA_ABIERTA INT,
			@RC INT,
			@RC2 INT

	SELECT @COD_MATERIA_CARRERA=COD_MATERIA_CARRERA
	FROM MATERIAS_CARRERAS
		WHERE COD_MATERIA=@COD_MATERIA
		--Se igualan unas variables a unas funciones para verificar lo requerido 
	SET @EXIS_MODULO= dbo.VERIFICAR_MODULO (@COD_MATERIA_CARRERA)
	SET	@EXIS_PROFESOR= dbo.VERIFICAR_PROFESOR (@COD_PROFESOR)
	SET	@EXIS_LABOR= dbo.VERIFICAR_LABORATORIO (@COD_LABORATORIO)
	SET @VERF_CERTIF= dbo.VerificarAsignacionProfesor (@COD_MATERIA,@COD_PROFESOR)
	SET @VERF_CHOQ_PROF= dbo.VERFICAR_CHO_P (@COD_PROFESOR,@DIA_SEMANA,@HORA_INICIO,@HORA_FIN)
	SET @VERF_CHOQ_LABOR= dbo.VERFICAR_CHO_LAB (@COD_LABORATORIO,@DIA_SEMANA,@HORA_INICIO,@HORA_FIN)

	SELECT @COSTO= COSTO
	FROM MATERIAS M INNER JOIN MATERIAS_CARRERAS MC
		ON M.COD_MATERIA=MC.COD_MATERIA
		WHERE COD_MATERIA_CARRERA=@COD_MATERIA_CARRERA
	
	IF (@EXIS_MODULO=1 AND @EXIS_PROFESOR=1 AND @EXIS_LABOR=1) AND (@VERF_CERTIF=1 AND @VERF_CHOQ_PROF=0 AND @VERF_CHOQ_LABOR=0)
		BEGIN 
		     EXECUTE @RC = dbo.INSERTAR_MATERIAS_ABIERTAS @COD_MATERIA_CARRERA, @COD_LABORATORIO, @COD_PROFESOR, @COSTO, @GRUPO, @ESPACIO, @FECHA_INICIO, @DESCUENTO_M --Se llama al CRUD de insertar materias abiertas
			
			 SELECT @COD_MATERIA_ABIERTA = COD_MATERIAS_ABIERTAS 
			 FROM MATERIAS_ABIERTAS
				WHERE MATERIAS_ABIERTAS.COD_MATERIA_CARRERA=@COD_MATERIA_CARRERA

			 EXECUTE @RC2 = dbo.INSERTAR_HORARIO @COD_MATERIA_ABIERTA,@DIA_SEMANA,@HORA_INICIO,@HORA_FIN  --Se llama al CRUD de insertar horario
			 PRINT 'MATERIA INSERTADA CORRECTAMENTE'
		END 
	ELSE    --De acuerdo al error que se de se manda un mensaje 
		 IF (@EXIS_MODULO=0)         
			PRINT 'LA MATERIA QUE DESEAS ABRIR NO EXISTE EN LA BASE DE DATOS'
		 IF (@EXIS_PROFESOR=0)
			PRINT 'EL PROFESOR QUE INTENTAS AGIGNAR A LA MATERIA NO EXISTE EN LA BASE DE DATOS' 
		 IF (@EXIS_LABOR=0)
			PRINT 'EL LABORATORIO QUE INTENTAS AGIGNAR A LA MATERIA NO EXISTE EN LA BASE DE DATOS'
		 IF (@VERF_CERTIF=0)
			PRINT 'EL PROFESOR QUE DESEAS ASIGNAR A LA MATERIA NO CUENTA CON EL CERTIFICADO NECESARIO'
		 IF (@VERF_CHOQ_PROF=1)
			PRINT 'EL PROFESOR QUE INTENTAS ASIGNAR A LA MATERIA TIENE UN CHOQUE DE HORARIO EN EL HORARIO ASIGNADO'
		 IF (@VERF_CHOQ_LABOR=1)
			PRINT 'EL LABORATORIO QUE INTENTAS ASIGNAR A LA MATERIA TIENE UN CHOQUE DE HORARIO EN EL HORARIO ASIGNADO'


END TRY

BEGIN CATCH
	SELECT 'ERROR AL INSERTAR MATERIA ' + ERROR_MESSAGE() AS Mensaje;
END CATCH
END

GO


GO
--Verifica que un profesor tenga el certificado para poder dar la asignacion que se manda por parametro
CREATE OR ALTER FUNCTION VerificarAsignacionProfesor(@COD_MATERIA VARCHAR(30),
                                                     @COD_PROFESOR INT)
RETURNS INT
AS
BEGIN
    DECLARE @RESULTADO INT = 0

    IF EXISTS(SELECT 1
              FROM CERTIFICADOS C INNER JOIN CERTIFICADOS_PROFESORES CP 
			  ON C.COD_CERTIFICADO=CP.COD_CERTIFICADO
			  INNER JOIN PROFESORES P 
			  ON CP.COD_PROFESOR=P.COD_PROFESOR
              WHERE CP.COD_PROFESOR=@COD_PROFESOR 
              AND NOMBRE_CERTIFICADO =(SELECT NOMBRE_MATERIA
									   FROM MATERIAS 
									   WHERE COD_MATERIA=@COD_MATERIA))
        SET @RESULTADO=1
   

    RETURN @RESULTADO
END;
GO

--FUNCION QUE VERIFICA QUE UN PROFESOR TIENE UN CHOQUE DE HORARIOS
GO
CREATE OR ALTER FUNCTION VERFICAR_CHO_P(@COD_PROFESOR INT, 
									    @DIA_SEMANA VARCHAR(20), 
									    @HORA_INICIO TIME, 
					    			    @HORA_FIN TIME)
RETURNS BIT
AS
BEGIN
    DECLARE @RESULTADO INT = 0

    IF EXISTS(SELECT 1 
			  FROM MATERIAS_ABIERTAS MA INNER JOIN HORARIO H
			  ON MA.COD_MATERIAS_ABIERTAS=H.COD_MATERIAS_ABIERTAS
              WHERE COD_PROFESOR = @COD_PROFESOR 
              AND DIA = @DIA_SEMANA 
              AND @HORA_INICIO BETWEEN HORA_INICIO AND HORA_FINAL)
 
        SET @RESULTADO = 1

    RETURN @RESULTADO
END;

GO


GO

--Se verifica si un laboratorio tiene choque de horarios
CREATE OR ALTER FUNCTION VERFICAR_CHO_LAB(@COD_LABORATORIO INT, 
									      @DIA_SEMANA VARCHAR(20), 
									      @HORA_INICIO TIME, 
					    			      @HORA_FIN TIME)
RETURNS BIT
AS
BEGIN
    DECLARE @RESULTADO INT = 0

    IF EXISTS(SELECT 1 
			  FROM MATERIAS_ABIERTAS MA INNER JOIN HORARIO H
			  ON MA.COD_MATERIAS_ABIERTAS=H.COD_MATERIAS_ABIERTAS
              WHERE COD_LABORATORIO = @COD_LABORATORIO 
              AND DIA = @DIA_SEMANA 
              AND @HORA_INICIO BETWEEN HORA_INICIO AND HORA_FINAL)

        SET @RESULTADO = 1

    RETURN @RESULTADO
END;

GO

GO
-- Función para verificar si un módulo existe
CREATE OR ALTER FUNCTION VERIFICAR_MODULO(@COD_MATERIA_CARRERA INT)
RETURNS BIT
AS
BEGIN
    DECLARE @EXISTE INT = 0

    IF EXISTS(SELECT 1 FROM MATERIAS_CARRERAS WHERE COD_MATERIA_CARRERA = @COD_MATERIA_CARRERA)
        SET @EXISTE = 1


    RETURN @EXISTE
END
GO

-- Función para verificar si un profesor existe
CREATE OR ALTER FUNCTION VERIFICAR_PROFESOR(@COD_PROFESOR INT)
RETURNS BIT
AS
BEGIN
    DECLARE @EXISTE INT = 0

    IF EXISTS(SELECT 1 FROM PROFESORES WHERE COD_PROFESOR = @COD_PROFESOR)
        SET @EXISTE = 1

    RETURN @EXISTE
END
GO

-- Función para verificar si un laboratorio existe
CREATE OR ALTER FUNCTION VERIFICAR_LABORATORIO(@COD_LABORATORIO INT)
RETURNS BIT
AS
BEGIN
    DECLARE @EXISTE INT = 0

    IF EXISTS(SELECT 1 FROM LABORATORIOS WHERE COD_LABORATORIO = @COD_LABORATORIO)
        SET @EXISTE = 1

    RETURN @EXISTE
END
GO


----------------------------------------------------------------------------------------------------------------------------------------------------
--PROCESO ALMACENADO PARA INSERTAR UNA MATRICULA
CREATE OR ALTER PROCEDURE MATRICULAR_ESTUDIANTES(@COD_MATERIA VARCHAR(10),
												 @CARNET VARCHAR(10),
												 @ESTADO VARCHAR(3),
									             @USUARIO_MATRICULA VARCHAR(20),
												 @OBSERVACIONES_MATRICULA VARCHAR(250), 
                                                 @DESCUENTO_MAT DECIMAL(10,2))
AS
BEGIN TRANSACTION 
BEGIN TRY
	
	DECLARE @VERF_MOD BIT,
			@VERF_CHOQ BIT,
			@VERF_MOROSO BIT, 
			@VERF_APROB BIT,
			@VER_EXIS BIT,
			@TOTAL DECIMAL(10,2)
			
			SELECT @TOTAL= COSTO
			FROM MATERIAS
				WHERE COD_MATERIA=@COD_MATERIA

			

			SET @VERF_MOD=dbo.VERFICAR_MODULO_ABIERTO (@COD_MATERIA)--Se igualan unas variables a unas funciones para verificar lo requerido 
			SET @VERF_CHOQ=dbo.VERFICAR_CHO_MODU (@CARNET,@COD_MATERIA)
			SET @VERF_MOROSO=dbo.VERFICAR_PAGO (@CARNET)
			SET @VERF_APROB=dbo.PROMEDIO_ESTUDIANTES (@CARNET,@COD_MATERIA)
			SET @VER_EXIS=dbo.VERIFICAR_ESTUDIANTE (@CARNET)

			IF (@VERF_MOD=1 AND @VERF_CHOQ=0 AND @VERF_MOROSO=1 AND @VERF_APROB=1 AND @VER_EXIS=1)
				BEGIN 
					EXECUTE dbo.INSERTAR_MATRICULA @CARNET,@ESTADO,@USUARIO_MATRICULA,@OBSERVACIONES_MATRICULA,@TOTAL,@DESCUENTO_MAT --Se llama el CRUD de insertar matricula 
					PRINT 'ESTUDIANTE MATRICULADO PERFECTAMENTE'

				END 

			ELSE                --Deacuerdo con la variable que no se cumpla se le muestra el error al usuario 
				IF (@VERF_MOD=0)
					PRINT 'LA MATERIA QUE INTENTAS MATRICULAR NO SE ENCUENTRA ABIERTA'
				IF (@VERF_CHOQ=1)
					PRINT 'EL ESTUDIANTE TIENE UN CHOQUE DE HORARIOS CON LA MATRICULA QUE DESEA MATRICULAR' 
				IF (@VERF_MOROSO=0)
					PRINT 'EL ESTUDIANTE QUE INTENTAS MATRICULAR SE ENCUENTRA MOROSO'
				IF (@VERF_APROB=0)
					PRINT 'EL ESTUDIANTE QUE DESEAS MATRICULAR NO CUENTA CON EL REQUISITO DE LA MATERIA'
				IF (@VER_EXIS=0)
					PRINT 'EL ESTUDIANTE QUE INTENTAS MATRICULAR NO EXISTE'
				 

END TRY

BEGIN CATCH
	ROLLBACK TRANSACTION 
	SELECT 'ERROR AL INSERTAR UNA MATRICULA ' + ERROR_MESSAGE() AS Mensaje;
END CATCH
COMMIT TRANSACTION
GO




GO
CREATE OR ALTER FUNCTION VERFICAR_CHO_MODU(@CARNET VARCHAR(10),
										   @COD_MATERIA VARCHAR(10))
RETURNS BIT
AS
BEGIN
    DECLARE @RESULTADO INT = 0,
			@DIA VARCHAR(10),
			@HORA_INICIO TIME
			

    SELECT @DIA=DIA,@HORA_INICIO=HORA_INICIO --Se asignan las variables haciendo las conexiones necesarias
		FROM HORARIO H INNER JOIN MATERIAS_ABIERTAS MA
			ON H.COD_MATERIAS_ABIERTAS=MA.COD_MATERIAS_ABIERTAS
			INNER JOIN MATERIAS_CARRERAS MC
			ON MA.COD_MATERIA_CARRERA=MC.COD_MATERIA_CARRERA
			INNER JOIN MATERIAS M 
			ON MC.COD_MATERIA=M.COD_MATERIA
			WHERE M.COD_MATERIA=@COD_MATERIA


    IF EXISTS(SELECT 1 --Luego se verifica si la hora de inicio de la materia esta entre hora inicio y hora fin de otros modulos, de ser asi, hay choque de horarios
			  FROM ESTUDIANTES E INNER JOIN MATRICULAS M
				ON E.CARNET=M.CARNET
				INNER JOIN DETALLE_MATRICULA DM
				ON M.NUM_RECIBO=DM.NUM_RECIBO
				INNER JOIN MATERIAS_ABIERTAS MA
				ON DM.COD_MATERIAS_ABIERTAS=MA.COD_MATERIAS_ABIERTAS
				INNER JOIN HORARIO H
				ON MA.COD_MATERIAS_ABIERTAS=H.COD_MATERIAS_ABIERTAS
                WHERE M.CARNET=@CARNET
				AND DIA = @DIA 
                AND @HORA_INICIO BETWEEN HORA_INICIO AND HORA_FINAL)
    BEGIN
		SET @RESULTADO = 1
	END

	ELSE 
		SET @RESULTADO = 0


    RETURN @RESULTADO
END;

GO


CREATE OR ALTER FUNCTION VERFICAR_PAGO(@CARNET VARCHAR(10))
RETURNS BIT
AS
BEGIN
    DECLARE @RESULTADO INT = 0
	
	IF EXISTS(SELECT 1  --Se verifica que el estudiante tenga todo al dia en cuestion de pago verificando una tabla de pagos deacuerdo al numero de recibo 
			  FROM MATRICULAS M INNER JOIN PAGOS P
				ON M.NUM_RECIBO=P.NUM_RECIBO
			  WHERE CARNET=@CARNET AND P.NUM_RECIBO IS NOT NULL)
	BEGIN 
		SET @RESULTADO= 1
	END
	ELSE 
		SET @RESULTADO= 0

RETURN @RESULTADO
END;

GO

CREATE OR ALTER FUNCTION VERFICAR_MODULO_ABIERTO(@COD_MATERIA VARCHAR(10))
RETURNS BIT
AS
BEGIN
    DECLARE @RESULTADO INT = 0
	
	IF EXISTS(SELECT 1 --En esta se verifica si un modulo esta abierto, se hacen las conexiones de materias a materias abiertas y nos aseguramos que cod materia carrera que esta relacionado no sea nulo en materias abiertas
			  FROM MATERIAS M INNER JOIN MATERIAS_CARRERAS MC
				ON M.COD_MATERIA=MC.COD_MATERIA
				INNER JOIN MATERIAS_ABIERTAS MA
				ON MC.COD_MATERIA_CARRERA=MA.COD_MATERIA_CARRERA
				WHERE M.COD_MATERIA=@COD_MATERIA AND MA.COD_MATERIA_CARRERA IS NOT NULL)
	BEGIN 
		SET @RESULTADO= 1
	END
	ELSE 
		SET @RESULTADO= 0

RETURN @RESULTADO
END;

GO


-- Función para verificar si un estudiante existe
CREATE OR ALTER FUNCTION VERIFICAR_ESTUDIANTE(@CARNET VARCHAR(10))
RETURNS BIT
AS
BEGIN
    DECLARE @EXISTE INT = 0

    IF EXISTS(SELECT 1 FROM ESTUDIANTES WHERE CARNET = @CARNET) --Se verifica si exixte con el carnet del estudiante 
        SET @EXISTE = 1

    RETURN @EXISTE
END
GO

--FUNCION QUE VERIFICA SI UN ESTUDIANTE GANO MODULO PASADO
CREATE OR ALTER FUNCTION PROMEDIO_ESTUDIANTES(@CARNET VARCHAR(10),
									          @COD_MATERIA VARCHAR(10))
RETURNS BIT
AS
BEGIN
    DECLARE @GANADO INT = 0,
			@REQUISITO VARCHAR(30)
	SELECT @REQUISITO=REQUISITO
	FROM MATERIAS 
		WHERE COD_MATERIA=@COD_MATERIA
	IF EXISTS(SELECT 1 --Condicional para verificar que hay una materia con el nombre del requisito para verficar que estudiante tenga ganado el modulo anterior
			  FROM ESTUDIANTES E INNER JOIN CALIFICACION_POR_MATERIA CM
				ON E.CARNET=CM.CARNET
				INNER JOIN MATERIAS_CARRERAS MC
				ON CM.COD_MATERIA_CARRERA=MC.COD_MATERIA_CARRERA
				INNER JOIN MATERIAS M
				ON MC.COD_MATERIA=M.COD_MATERIA
				WHERE CM.CARNET=@CARNET AND M.COD_MATERIA=@REQUISITO)
			
	BEGIN 
		SET @GANADO=1
	END

    RETURN @GANADO
END
GO

--TRIGGER
--ESTE TRIGGER SE ACTIVA CUANDO SE REALIZA UNA INSERCION EN MATRICULAS Y SE GUARDA EL PAGO EN LA TABLA DE PAGOS
GO
CREATE OR ALTER TRIGGER TR_INGRESAR_PAGO
ON MATRICULAS FOR INSERT
AS
	DECLARE @NUM_RECIBO INT,
			@MONTO_PAGAR DECIMAL(10,2),
			@DETALLE_PAGO VARCHAR(100)

	SELECT @NUM_RECIBO=NUM_RECIBO,@MONTO_PAGAR=TOTAL
	FROM INSERTED 

	INSERT INTO PAGOS(NUM_RECIBO,MONTO_PAGAR,DETALLE_PAGO)
		VALUES (@NUM_RECIBO,@MONTO_PAGAR,'PAGO MATRICULA')
	PRINT 'PAGO REALIZADO DE MANERA PERFECTA'
		
GO

--ESTE TRIGGER SE ACTIVA CUANDO UN PROFESOR TIENE UN BORRADO LOGICO Y VERIFICA SI TINEN MATERIAS ABIERTAS Y DE SER ASI ACTUALIZA COD PROFESOR A NULL
GO
CREATE OR ALTER TRIGGER TR_BORRADO_PROFESOR
ON PROFESORES AFTER UPDATE
AS
	DECLARE @COD_PROF INT,@BORRADO INT
	SELECT @COD_PROF = COD_PROFESOR FROM inserted
	SELECT @BORRADO = BORRADO FROM inserted
	SELECT * FROM PROFESORES

	IF (@BORRADO = 1)
		BEGIN
			IF EXISTS(SELECT 1 FROM PROFESORES WHERE (COD_PROFESOR = @COD_PROF AND BORRADO=@BORRADO))
				BEGIN
					UPDATE MATERIAS_ABIERTAS SET COD_PROFESOR = NULL WHERE COD_PROFESOR = @COD_PROF
				END
		END

--TRIGGER QUE SE ACTIVA CUANDO SE ELIMINA UNA DETALLE MATRICULA Y TAMBIEN ELIMINA LA MATRICULA PARA QUE NO QUEDE UNA MATRICULA SIN MATERIA 
GO
CREATE OR ALTER TRIGGER TR_ELIMINAR_MATRICULAS
ON DETALLE_MATRICULA FOR DELETE
AS
	DECLARE @NUM_MATRICULA INT
	SELECT @NUM_MATRICULA = NUM_RECIBO FROM deleted

	IF NOT EXISTS (SELECT 1 FROM DETALLE_MATRICULA WHERE NUM_RECIBO = @NUM_MATRICULA)
		BEGIN
			DELETE MATRICULAS WHERE NUM_RECIBO = @NUM_MATRICULA
		END

--TRIGGER QUE SE ACTIVA CUANDO SE REALIZA UN BORRADO LOGICO Y ACTUALIZA EL ESTADO DE MATERIA A INACTIVO
GO
CREATE OR ALTER TRIGGER TR_BORRADO_LOGICO_EST
ON ESTUDIANTES FOR UPDATE
AS
	DECLARE @CARNET VARCHAR(10)
	SELECT @CARNET = CARNET FROM inserted
	IF EXISTS(SELECT 1 FROM ESTUDIANTES WHERE (CARNET = @CARNET) AND (BORRADO_E = 1))
		UPDATE MATRICULAS SET ESTADO = 'INA' WHERE CARNET = @CARNET

--ESTE TRIGGER SE ACTIVA CUANDO SE ELIMINA UNA MATERIA ABIERTA Y ELIMINA TAMBIEN EL HORARIO QUE TIENE ASIGNADO
GO
CREATE OR ALTER TRIGGER TR_BORRAR_MA
ON MATERIAS_ABIERTAS AFTER DELETE
AS
	DECLARE @COD_MATERIA_ABIERTA INT
	SELECT @COD_MATERIA_ABIERTA = COD_MATERIAS_ABIERTAS FROM deleted

	DELETE HORARIO WHERE COD_MATERIAS_ABIERTAS =@COD_MATERIA_ABIERTA


--ESTE TRIGGER SE EJECUTA CUANDO SE ELIMINA UNA MATRICULA Y SE BORRAN TODOS LOS DETALLE MATRICULA RELACIONADOS
GO
CREATE OR ALTER TRIGGER TR_ELIMINAR_MATRICULA
ON MATRICULAS FOR DELETE
AS
	DECLARE @NUM_MATRICULA INT
	SELECT @NUM_MATRICULA = NUM_RECIBO FROM deleted
	
	DELETE DETALLE_MATRICULA WHERE NUM_RECIBO = @NUM_MATRICULA

GO
--ESTE TRIGGER SE ACTIVA CUANDO SE INSERTA EN LA TABLA MATRICULAS Y CALCULA LA NOTA FINAL DE UN MODO Y LUEGO LA ACTUALIZA EN EL CAMPO DE MATERIAS ABIERTAS CORRESPONDIENTE
CREATE OR ALTER TRIGGER CALCULAR_FECHA_FINAL
ON HORARIO FOR INSERT
AS
    DECLARE @fechaFinal DATETIME,
            @HORASTOTALES INT,
            @horasLaborales INT,
            @FECHAINICIO DATE,
            @DIA VARCHAR(20),
            @HORA_INICIO TIME,
            @HORA_FINAL TIME

    -- Calcular la duración total del módulo sumando las horas de clase programadas para cada día de la semana
    SELECT @HORASTOTALES = DURACION 
    FROM MATERIAS M INNER JOIN MATERIAS_CARRERAS MC
        ON M.COD_MATERIA=MC.COD_MATERIA
		INNER JOIN MATERIAS_ABIERTAS MA
        ON MC.COD_MATERIA_CARRERA=MA.COD_MATERIA_CARRERA
    WHERE COD_MATERIAS_ABIERTAS IN(SELECT TOP 1 COD_MATERIAS_ABIERTAS FROM inserted)

    SELECT @DIA=DIA,@HORA_INICIO=HORA_INICIO,@HORA_FINAL=HORA_FINAL
    FROM inserted

    SELECT @FECHAINICIO=FECHA_INICIO
    FROM MATERIAS_ABIERTAS 
    WHERE COD_MATERIAS_ABIERTAS IN(SELECT TOP 1 COD_MATERIAS_ABIERTAS FROM inserted)


    -- Se iguala la fecha final a la fecha en la que inicia el modulo
    SET @fechaFinal = @FECHAINICIO

    WHILE @HORASTOTALES > 0
    BEGIN
        -- Verificar si el día es hábil, si hay horas de clase programadas y si no es día feriado
        IF DATEPART(weekday, @fechaFinal) NOT IN (1, 7) 
            AND DATENAME(weekday, @fechaFinal) = @DIA 
            AND NOT EXISTS (SELECT 1 FROM FERIADOS WHERE DIA_FERIADO = @fechaFinal)
        BEGIN
            -- Calcular la cantidad de horas de clase programadas para el día actual
            SET @horasLaborales = DATEDIFF(HOUR, @HORA_INICIO, @HORA_FINAL)

            -- Agregar las horas laborales acumuladas para obtener la fecha final
            SET @fechaFinal = DATEADD(hour, @horasLaborales, @fechaFinal)
			--Se restan las horas para poder detener el ciclo 
            SET @HORASTOTALES = @HORASTOTALES - @horasLaborales
			
        END

        -- Avanzar al siguiente día hábil
        SET @fechaFinal = DATEADD(day, 1, @fechaFinal)
    END

    UPDATE MATERIAS_ABIERTAS SET FECHA_FINAL = @fechaFinal WHERE COD_MATERIAS_ABIERTAS IN(SELECT TOP 1 COD_MATERIAS_ABIERTAS FROM inserted)
GO

--Cuando ingresamos la fecha inicio debemos tener en cuanta que esta debe ser el primer dia que se da el modulo, osea, que tenga lecciones ese dia
























